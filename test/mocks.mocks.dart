// Mocks generated by Mockito 5.4.6 from annotations
// in media_fast_view/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i3;

import 'package:media_fast_view/core/services/bookmark_service.dart' as _i22;
import 'package:media_fast_view/core/services/file_service.dart' as _i19;
import 'package:media_fast_view/core/services/permission_service.dart' as _i4;
import 'package:media_fast_view/core/services/platform_service.dart' as _i21;
import 'package:media_fast_view/features/favorites/data/data_sources/shared_preferences_data_source.dart'
    as _i17;
import 'package:media_fast_view/features/favorites/data/models/favorite_model.dart'
    as _i18;
import 'package:media_fast_view/features/favorites/domain/repositories/favorites_repository.dart'
    as _i10;
import 'package:media_fast_view/features/media_library/data/data_sources/filesystem_media_data_source.dart'
    as _i2;
import 'package:media_fast_view/features/media_library/data/data_sources/local_media_data_source.dart'
    as _i12;
import 'package:media_fast_view/features/media_library/data/data_sources/shared_preferences_data_source.dart'
    as _i13;
import 'package:media_fast_view/features/media_library/data/models/directory_model.dart'
    as _i14;
import 'package:media_fast_view/features/media_library/data/models/media_model.dart'
    as _i11;
import 'package:media_fast_view/features/media_library/data/models/tag_model.dart'
    as _i16;
import 'package:media_fast_view/features/media_library/domain/entities/media_entity.dart'
    as _i7;
import 'package:media_fast_view/features/media_library/domain/repositories/media_repository.dart'
    as _i5;
import 'package:media_fast_view/features/tagging/data/data_sources/shared_preferences_data_source.dart'
    as _i15;
import 'package:media_fast_view/features/tagging/domain/entities/tag_entity.dart'
    as _i9;
import 'package:media_fast_view/features/tagging/domain/repositories/tag_repository.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i20;
import 'package:shared_preferences/shared_preferences.dart' as _i23;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePermissionValidationResult_0 extends _i1.SmartFake
    implements _i2.PermissionValidationResult {
  _FakePermissionValidationResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileStat_1 extends _i1.SmartFake implements _i3.FileStat {
  _FakeFileStat_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBookmarkValidationResult_2 extends _i1.SmartFake
    implements _i4.BookmarkValidationResult {
  _FakeBookmarkValidationResult_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePermissionMonitorResult_3 extends _i1.SmartFake
    implements _i4.PermissionMonitorResult {
  _FakePermissionMonitorResult_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MediaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMediaRepository extends _i1.Mock implements _i5.MediaRepository {
  MockMediaRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i7.MediaEntity>> getMediaForDirectoryPath(
    String? directoryPath, {
    String? bookmarkData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getMediaForDirectoryPath,
              [directoryPath],
              {#bookmarkData: bookmarkData},
            ),
            returnValue: _i6.Future<List<_i7.MediaEntity>>.value(
              <_i7.MediaEntity>[],
            ),
          )
          as _i6.Future<List<_i7.MediaEntity>>);

  @override
  _i6.Future<List<_i7.MediaEntity>> getMediaForDirectory(String? directoryId) =>
      (super.noSuchMethod(
            Invocation.method(#getMediaForDirectory, [directoryId]),
            returnValue: _i6.Future<List<_i7.MediaEntity>>.value(
              <_i7.MediaEntity>[],
            ),
          )
          as _i6.Future<List<_i7.MediaEntity>>);

  @override
  _i6.Future<_i7.MediaEntity?> getMediaById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getMediaById, [id]),
            returnValue: _i6.Future<_i7.MediaEntity?>.value(),
          )
          as _i6.Future<_i7.MediaEntity?>);

  @override
  _i6.Future<List<_i7.MediaEntity>> filterMediaByTagsForDirectory(
    List<String>? tagIds,
    String? directoryPath, {
    String? bookmarkData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #filterMediaByTagsForDirectory,
              [tagIds, directoryPath],
              {#bookmarkData: bookmarkData},
            ),
            returnValue: _i6.Future<List<_i7.MediaEntity>>.value(
              <_i7.MediaEntity>[],
            ),
          )
          as _i6.Future<List<_i7.MediaEntity>>);

  @override
  _i6.Future<List<_i7.MediaEntity>> filterMediaByTags(List<String>? tagIds) =>
      (super.noSuchMethod(
            Invocation.method(#filterMediaByTags, [tagIds]),
            returnValue: _i6.Future<List<_i7.MediaEntity>>.value(
              <_i7.MediaEntity>[],
            ),
          )
          as _i6.Future<List<_i7.MediaEntity>>);

  @override
  _i6.Future<void> updateMediaTags(String? mediaId, List<String>? tagIds) =>
      (super.noSuchMethod(
            Invocation.method(#updateMediaTags, [mediaId, tagIds]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeMediaForDirectory(String? directoryId) =>
      (super.noSuchMethod(
            Invocation.method(#removeMediaForDirectory, [directoryId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

}

/// A class which mocks [TagRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTagRepository extends _i1.Mock implements _i8.TagRepository {
  MockTagRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i9.TagEntity>> getTags() =>
      (super.noSuchMethod(
            Invocation.method(#getTags, []),
            returnValue: _i6.Future<List<_i9.TagEntity>>.value(
              <_i9.TagEntity>[],
            ),
          )
          as _i6.Future<List<_i9.TagEntity>>);

  @override
  _i6.Future<_i9.TagEntity?> getTagById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTagById, [id]),
            returnValue: _i6.Future<_i9.TagEntity?>.value(),
          )
          as _i6.Future<_i9.TagEntity?>);

  @override
  _i6.Future<void> createTag(_i9.TagEntity? tag) =>
      (super.noSuchMethod(
            Invocation.method(#createTag, [tag]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateTag(_i9.TagEntity? tag) =>
      (super.noSuchMethod(
            Invocation.method(#updateTag, [tag]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteTag(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTag, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [FavoritesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesRepository extends _i1.Mock
    implements _i10.FavoritesRepository {
  MockFavoritesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<String>> getFavoriteMediaIds() =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteMediaIds, []),
            returnValue: _i6.Future<List<String>>.value(<String>[]),
          )
          as _i6.Future<List<String>>);

  @override
  _i6.Future<void> addFavorite(String? mediaId) =>
      (super.noSuchMethod(
            Invocation.method(#addFavorite, [mediaId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeFavorite(String? mediaId) =>
      (super.noSuchMethod(
            Invocation.method(#removeFavorite, [mediaId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> isFavorite(String? mediaId) =>
      (super.noSuchMethod(
            Invocation.method(#isFavorite, [mediaId]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);
}

/// A class which mocks [FilesystemMediaDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilesystemMediaDataSource extends _i1.Mock
    implements _i2.FilesystemMediaDataSource {
  MockFilesystemMediaDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.PermissionValidationResult> validateDirectoryAccess(
    String? directoryPath, {
    String? bookmarkData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #validateDirectoryAccess,
              [directoryPath],
              {#bookmarkData: bookmarkData},
            ),
            returnValue: _i6.Future<_i2.PermissionValidationResult>.value(
              _FakePermissionValidationResult_0(
                this,
                Invocation.method(
                  #validateDirectoryAccess,
                  [directoryPath],
                  {#bookmarkData: bookmarkData},
                ),
              ),
            ),
          )
          as _i6.Future<_i2.PermissionValidationResult>);

  @override
  _i6.Future<List<_i11.MediaModel>> scanMediaForDirectory(
    String? directoryPath,
    String? directoryId, {
    String? bookmarkData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #scanMediaForDirectory,
              [directoryPath, directoryId],
              {#bookmarkData: bookmarkData},
            ),
            returnValue: _i6.Future<List<_i11.MediaModel>>.value(
              <_i11.MediaModel>[],
            ),
          )
          as _i6.Future<List<_i11.MediaModel>>);

  @override
  _i6.Future<List<String>> scanSubdirectories(String? directoryPath) =>
      (super.noSuchMethod(
            Invocation.method(#scanSubdirectories, [directoryPath]),
            returnValue: _i6.Future<List<String>>.value(<String>[]),
          )
          as _i6.Future<List<String>>);

  @override
  _i6.Future<_i11.MediaModel?> getMediaById(
    String? mediaId,
    String? directoryPath,
    String? directoryId, {
    String? bookmarkData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getMediaById,
              [mediaId, directoryPath, directoryId],
              {#bookmarkData: bookmarkData},
            ),
            returnValue: _i6.Future<_i11.MediaModel?>.value(),
          )
          as _i6.Future<_i11.MediaModel?>);

  @override
  _i6.Future<List<_i11.MediaModel>> filterMediaByTags(
    String? directoryPath,
    String? directoryId,
    List<String>? tagIds, {
    String? bookmarkData,
    _i12.SharedPreferencesMediaDataSource? sharedPreferencesDataSource,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #filterMediaByTags,
              [directoryPath, directoryId, tagIds],
              {
                #bookmarkData: bookmarkData,
                #sharedPreferencesDataSource: sharedPreferencesDataSource,
              },
            ),
            returnValue: _i6.Future<List<_i11.MediaModel>>.value(
              <_i11.MediaModel>[],
            ),
          )
          as _i6.Future<List<_i11.MediaModel>>);
}

/// A class which mocks [SharedPreferencesMediaDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesMediaDataSource extends _i1.Mock
    implements _i12.SharedPreferencesMediaDataSource {
  MockSharedPreferencesMediaDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i11.MediaModel>> getMedia() =>
      (super.noSuchMethod(
            Invocation.method(#getMedia, []),
            returnValue: _i6.Future<List<_i11.MediaModel>>.value(
              <_i11.MediaModel>[],
            ),
          )
          as _i6.Future<List<_i11.MediaModel>>);

  @override
  _i6.Future<void> saveMedia(List<_i11.MediaModel>? media) =>
      (super.noSuchMethod(
            Invocation.method(#saveMedia, [media]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> upsertMedia(List<_i11.MediaModel>? media) =>
      (super.noSuchMethod(
            Invocation.method(#upsertMedia, [media]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i11.MediaModel>> getMediaForDirectory(String? directoryId) =>
      (super.noSuchMethod(
            Invocation.method(#getMediaForDirectory, [directoryId]),
            returnValue: _i6.Future<List<_i11.MediaModel>>.value(
              <_i11.MediaModel>[],
            ),
          )
          as _i6.Future<List<_i11.MediaModel>>);

  @override
  _i6.Future<void> addMedia(List<_i11.MediaModel>? mediaItems) =>
      (super.noSuchMethod(
            Invocation.method(#addMedia, [mediaItems]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateMediaTags(String? mediaId, List<String>? tagIds) =>
      (super.noSuchMethod(
            Invocation.method(#updateMediaTags, [mediaId, tagIds]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeMediaForDirectory(String? directoryId) =>
      (super.noSuchMethod(
            Invocation.method(#removeMediaForDirectory, [directoryId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> migrateDirectoryId(
    String? legacyDirectoryId,
    String? stableDirectoryId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(
              #migrateDirectoryId,
              [legacyDirectoryId, stableDirectoryId],
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [SharedPreferencesDirectoryDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesDirectoryDataSource extends _i1.Mock
    implements _i13.SharedPreferencesDirectoryDataSource {
  MockSharedPreferencesDirectoryDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i14.DirectoryModel>> getDirectories() =>
      (super.noSuchMethod(
            Invocation.method(#getDirectories, []),
            returnValue: _i6.Future<List<_i14.DirectoryModel>>.value(
              <_i14.DirectoryModel>[],
            ),
          )
          as _i6.Future<List<_i14.DirectoryModel>>);

  @override
  _i6.Future<void> saveDirectories(List<_i14.DirectoryModel>? directories) =>
      (super.noSuchMethod(
            Invocation.method(#saveDirectories, [directories]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> addDirectory(_i14.DirectoryModel? directory) =>
      (super.noSuchMethod(
            Invocation.method(#addDirectory, [directory]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeDirectory(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeDirectory, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateDirectory(_i14.DirectoryModel? updatedDirectory) =>
      (super.noSuchMethod(
            Invocation.method(#updateDirectory, [updatedDirectory]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> clearDirectories() =>
      (super.noSuchMethod(
            Invocation.method(#clearDirectories, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [SharedPreferencesTagDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesTagDataSource extends _i1.Mock
    implements _i15.SharedPreferencesTagDataSource {
  MockSharedPreferencesTagDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i16.TagModel>> getTags() =>
      (super.noSuchMethod(
            Invocation.method(#getTags, []),
            returnValue: _i6.Future<List<_i16.TagModel>>.value(
              <_i16.TagModel>[],
            ),
          )
          as _i6.Future<List<_i16.TagModel>>);

  @override
  _i6.Future<void> saveTags(List<_i16.TagModel>? tags) =>
      (super.noSuchMethod(
            Invocation.method(#saveTags, [tags]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> addTag(_i16.TagModel? tag) =>
      (super.noSuchMethod(
            Invocation.method(#addTag, [tag]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateTag(_i16.TagModel? updatedTag) =>
      (super.noSuchMethod(
            Invocation.method(#updateTag, [updatedTag]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeTag(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeTag, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [SharedPreferencesFavoritesDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesFavoritesDataSource extends _i1.Mock
    implements _i17.SharedPreferencesFavoritesDataSource {
  MockSharedPreferencesFavoritesDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i18.FavoriteModel>> getFavorites() =>
      (super.noSuchMethod(
            Invocation.method(#getFavorites, []),
            returnValue: _i6.Future<List<_i18.FavoriteModel>>.value(
              <_i18.FavoriteModel>[],
            ),
          )
          as _i6.Future<List<_i18.FavoriteModel>>);

  @override
  _i6.Future<void> saveFavorites(List<_i18.FavoriteModel>? favorites) =>
      (super.noSuchMethod(
            Invocation.method(#saveFavorites, [favorites]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> addFavorite(_i18.FavoriteModel? favorite) =>
      (super.noSuchMethod(
            Invocation.method(#addFavorite, [favorite]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeFavorite(String? mediaId) =>
      (super.noSuchMethod(
            Invocation.method(#removeFavorite, [mediaId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> isFavorite(String? mediaId) =>
      (super.noSuchMethod(
            Invocation.method(#isFavorite, [mediaId]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<List<String>> getFavoriteMediaIds() =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteMediaIds, []),
            returnValue: _i6.Future<List<String>>.value(<String>[]),
          )
          as _i6.Future<List<String>>);
}

/// A class which mocks [FileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileService extends _i1.Mock implements _i19.FileService {
  MockFileService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> deleteFile(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFile, [filePath]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteDirectory(String? directoryPath) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDirectory, [directoryPath]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> exists(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#exists, [path]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<_i3.FileStat> getFileStat(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#getFileStat, [filePath]),
            returnValue: _i6.Future<_i3.FileStat>.value(
              _FakeFileStat_1(
                this,
                Invocation.method(#getFileStat, [filePath]),
              ),
            ),
          )
          as _i6.Future<_i3.FileStat>);

  @override
  _i6.Future<List<_i3.FileSystemEntity>> getDirectoryContents(
    String? directoryPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDirectoryContents, [directoryPath]),
            returnValue: _i6.Future<List<_i3.FileSystemEntity>>.value(
              <_i3.FileSystemEntity>[],
            ),
          )
          as _i6.Future<List<_i3.FileSystemEntity>>);

  @override
  _i6.Future<bool> isPathAccessible(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#isPathAccessible, [path]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  String getFileExtension(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#getFileExtension, [filePath]),
            returnValue: _i20.dummyValue<String>(
              this,
              Invocation.method(#getFileExtension, [filePath]),
            ),
          )
          as String);

  @override
  String getMediaTypeFromExtension(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#getMediaTypeFromExtension, [filePath]),
            returnValue: _i20.dummyValue<String>(
              this,
              Invocation.method(#getMediaTypeFromExtension, [filePath]),
            ),
          )
          as String);

  @override
  _i6.Future<bool> isDirectory(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#isDirectory, [path]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<int> getDirectorySize(String? directoryPath) =>
      (super.noSuchMethod(
            Invocation.method(#getDirectorySize, [directoryPath]),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);
}

/// A class which mocks [PermissionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionService extends _i1.Mock implements _i4.PermissionService {
  MockPermissionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> hasStoragePermission() =>
      (super.noSuchMethod(
            Invocation.method(#hasStoragePermission, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> requestStoragePermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestStoragePermission, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<_i4.PermissionStatus> checkDirectoryAccess(
    String? directoryPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#checkDirectoryAccess, [directoryPath]),
            returnValue: _i6.Future<_i4.PermissionStatus>.value(
              _i4.PermissionStatus.granted,
            ),
          )
          as _i6.Future<_i4.PermissionStatus>);

  @override
  _i6.Future<_i4.BookmarkValidationResult> validateBookmark(
    String? bookmarkData,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#validateBookmark, [bookmarkData]),
            returnValue: _i6.Future<_i4.BookmarkValidationResult>.value(
              _FakeBookmarkValidationResult_2(
                this,
                Invocation.method(#validateBookmark, [bookmarkData]),
              ),
            ),
          )
          as _i6.Future<_i4.BookmarkValidationResult>);

  @override
  _i6.Future<_i4.DirectoryRecoveryResult?> recoverDirectoryAccess(
    String? directoryPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#recoverDirectoryAccess, [directoryPath]),
            returnValue: _i6.Future<_i4.DirectoryRecoveryResult?>.value(),
          )
          as _i6.Future<_i4.DirectoryRecoveryResult?>);

  @override
  _i6.Future<String?> renewBookmark(
    String? expiredBookmarkData,
    String? directoryPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#renewBookmark, [
              expiredBookmarkData,
              directoryPath,
            ]),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<_i4.BookmarkValidationResult> validateAndRenewBookmark(
    String? bookmarkData,
    String? directoryPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#validateAndRenewBookmark, [
              bookmarkData,
              directoryPath,
            ]),
            returnValue: _i6.Future<_i4.BookmarkValidationResult>.value(
              _FakeBookmarkValidationResult_2(
                this,
                Invocation.method(#validateAndRenewBookmark, [
                  bookmarkData,
                  directoryPath,
                ]),
              ),
            ),
          )
          as _i6.Future<_i4.BookmarkValidationResult>);

  @override
  void logPermissionEvent(
    String? event, {
    String? path,
    String? error,
    String? details,
  }) => super.noSuchMethod(
    Invocation.method(
      #logPermissionEvent,
      [event],
      {#path: path, #error: error, #details: details},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<bool> canAccessPath(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#canAccessPath, [path]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> canWriteToPath(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#canWriteToPath, [path]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> ensureStoragePermission() =>
      (super.noSuchMethod(
            Invocation.method(#ensureStoragePermission, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> ensurePathAccessible(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#ensurePathAccessible, [path]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> ensurePathWritable(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#ensurePathWritable, [path]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i4.PermissionMonitorResult> monitorDirectoryPermissions(
    String? directoryPath, {
    String? bookmarkData,
    Duration? checkInterval = const Duration(minutes: 5),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #monitorDirectoryPermissions,
              [directoryPath],
              {#bookmarkData: bookmarkData, #checkInterval: checkInterval},
            ),
            returnValue: _i6.Future<_i4.PermissionMonitorResult>.value(
              _FakePermissionMonitorResult_3(
                this,
                Invocation.method(
                  #monitorDirectoryPermissions,
                  [directoryPath],
                  {#bookmarkData: bookmarkData, #checkInterval: checkInterval},
                ),
              ),
            ),
          )
          as _i6.Future<_i4.PermissionMonitorResult>);

  @override
  _i6.Future<List<_i4.DirectoryPermissionStatus>> validateMultipleDirectories(
    List<String>? directoryPaths, {
    Map<String, String?>? bookmarkDataMap,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #validateMultipleDirectories,
              [directoryPaths],
              {#bookmarkDataMap: bookmarkDataMap},
            ),
            returnValue: _i6.Future<List<_i4.DirectoryPermissionStatus>>.value(
              <_i4.DirectoryPermissionStatus>[],
            ),
          )
          as _i6.Future<List<_i4.DirectoryPermissionStatus>>);
}

/// A class which mocks [PlatformService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformService extends _i1.Mock implements _i21.PlatformService {
  MockPlatformService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isMacOS =>
      (super.noSuchMethod(Invocation.getter(#isMacOS), returnValue: false)
          as bool);

  @override
  bool get isIOS =>
      (super.noSuchMethod(Invocation.getter(#isIOS), returnValue: false)
          as bool);

  @override
  String get platformName =>
      (super.noSuchMethod(
            Invocation.getter(#platformName),
            returnValue: _i20.dummyValue<String>(
              this,
              Invocation.getter(#platformName),
            ),
          )
          as String);

  @override
  bool get supportsContextMenus =>
      (super.noSuchMethod(
            Invocation.getter(#supportsContextMenus),
            returnValue: false,
          )
          as bool);

  @override
  bool get supportsDragAndDrop =>
      (super.noSuchMethod(
            Invocation.getter(#supportsDragAndDrop),
            returnValue: false,
          )
          as bool);

  @override
  String get pathSeparator =>
      (super.noSuchMethod(
            Invocation.getter(#pathSeparator),
            returnValue: _i20.dummyValue<String>(
              this,
              Invocation.getter(#pathSeparator),
            ),
          )
          as String);

  @override
  bool get isCaseSensitiveFileSystem =>
      (super.noSuchMethod(
            Invocation.getter(#isCaseSensitiveFileSystem),
            returnValue: false,
          )
          as bool);

  @override
  _i6.Future<String?> getDocumentsDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getDocumentsDirectory, []),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<String?> getTemporaryDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getTemporaryDirectory, []),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  String joinPaths(
    String? part1,
    String? part2, [
    String? part3,
    String? part4,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#joinPaths, [part1, part2, part3, part4]),
            returnValue: _i20.dummyValue<String>(
              this,
              Invocation.method(#joinPaths, [part1, part2, part3, part4]),
            ),
          )
          as String);

  @override
  String normalizePath(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#normalizePath, [path]),
            returnValue: _i20.dummyValue<String>(
              this,
              Invocation.method(#normalizePath, [path]),
            ),
          )
          as String);
}

/// A class which mocks [BookmarkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookmarkService extends _i1.Mock implements _i22.BookmarkService {
  MockBookmarkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<String> createBookmark(String? directoryPath) =>
      (super.noSuchMethod(
            Invocation.method(#createBookmark, [directoryPath]),
            returnValue: _i6.Future<String>.value(
              _i20.dummyValue<String>(
                this,
                Invocation.method(#createBookmark, [directoryPath]),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<Map<String, dynamic>> selectDirectoryAndCreateBookmark({
    String? initialDirectoryPath,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#selectDirectoryAndCreateBookmark, [], {
              #initialDirectoryPath: initialDirectoryPath,
            }),
            returnValue: _i6.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<String> resolveBookmark(String? bookmarkData) =>
      (super.noSuchMethod(
            Invocation.method(#resolveBookmark, [bookmarkData]),
            returnValue: _i6.Future<String>.value(
              _i20.dummyValue<String>(
                this,
                Invocation.method(#resolveBookmark, [bookmarkData]),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<void> stopAccessingBookmark(String? bookmarkData) =>
      (super.noSuchMethod(
            Invocation.method(#stopAccessingBookmark, [bookmarkData]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> isBookmarkValid(String? bookmarkData) =>
      (super.noSuchMethod(
            Invocation.method(#isBookmarkValid, [bookmarkData]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<String> startAccessingBookmark(String? bookmarkData) =>
      (super.noSuchMethod(
            Invocation.method(#startAccessingBookmark, [bookmarkData]),
            returnValue: _i6.Future<String>.value(
              _i20.dummyValue<String>(
                this,
                Invocation.method(#startAccessingBookmark, [bookmarkData]),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<String?> ensurePersistentAccess(String? bookmarkData) =>
      (super.noSuchMethod(
            Invocation.method(#ensurePersistentAccess, [bookmarkData]),
            returnValue: _i6.Future<String?>.value(),
            returnValueForMissingStub: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<void> releasePersistentAccess(String? bookmarkData) =>
      (super.noSuchMethod(
            Invocation.method(#releasePersistentAccess, [bookmarkData]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> releaseAllPersistentAccesses() => (super.noSuchMethod(
            Invocation.method(#releaseAllPersistentAccesses, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i23.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() =>
      (super.noSuchMethod(
            Invocation.method(#getKeys, []),
            returnValue: <String>{},
          )
          as Set<String>);

  @override
  Object? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as Object?);

  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);

  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);

  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);

  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);

  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: false,
          )
          as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]))
          as List<String>?);

  @override
  _i6.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#setBool, [key, value]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(
            Invocation.method(#setInt, [key, value]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(
            Invocation.method(#setDouble, [key, value]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#setString, [key, value]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(
            Invocation.method(#setStringList, [key, value]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> commit() =>
      (super.noSuchMethod(
            Invocation.method(#commit, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> reload() =>
      (super.noSuchMethod(
            Invocation.method(#reload, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}
